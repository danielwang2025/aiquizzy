
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Read configuration from environment variables (browser compatible way)
const supabaseUrl = import.meta.env?.SUPABASE_URL;
const supabaseKey = import.meta.env?.SUPABASE_PUBLISHABLE_KEY;

// If environment variables are missing, use development fallback values (only in development)
const isDevelopment = import.meta.env?.DEV === true;
const fallbackUrl = isDevelopment ? 'https://icezlugcnsmpfpsiszvu.supabase.co' : '';
const fallbackKey = isDevelopment ? 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImljZXpsdWdjbnNtcGZwc2lzenZ1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQxOTA3NDAsImV4cCI6MjA1OTc2Njc0MH0.X9OSf14FwU8rpBAJsqeP9ORJrHwFPY4W_ahToqZ3vUc' : '';

// Use environment variables or fallbacks
const finalSupabaseUrl = supabaseUrl || fallbackUrl;
const finalSupabaseKey = supabaseKey || fallbackKey;

// If configuration is still missing, throw an error
if (!finalSupabaseUrl || !finalSupabaseKey) {
  throw new Error('Missing Supabase configuration. Please set SUPABASE_URL and SUPABASE_PUBLISHABLE_KEY in your environment variables.');
}

// Create Supabase client
export const supabase = createClient<Database>(finalSupabaseUrl, finalSupabaseKey);

// Mock functions to simulate database operations without actual DB tables
export const mockDB = {
  from: (table: string) => ({
    select: (columns: string = '*') => ({
      eq: (column: string, value: any) => ({
        single: async () => ({ data: null, error: null })
      }),
      limit: (limit: number) => ({
        eq: (column: string, value: any) => ({
          data: null,
          error: null
        })
      })
    }),
    insert: (data: any) => ({
      data: null,
      error: null
    }),
    update: (data: any) => ({
      eq: (column: string, value: any) => ({
        data: null,
        error: null
      })
    })
  })
};

// Override supabase methods to avoid errors
const originalFrom = supabase.from.bind(supabase);
supabase.from = (table: string) => {
  try {
    return originalFrom(table as any);
  } catch (error) {
    console.warn(`Table ${table} doesn't exist in schema, using mock`);
    return mockDB.from(table) as any;
  }
};
